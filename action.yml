name: "SonarQube Badge + Comment on PR"
description: 'SonarQube Badge'
inputs:
  github-token:
    description: 'GitHub token'
    required: false
  metrics:
    description: 'Target metrics to be generated, comma-separated'
    required: false
    default: 'all'
  sonar-project:
    description: 'Sonar project key'
    required: true
  sonar-badge-token:
    description: 'Sonar badge token'
    required: true
  
outputs:
  list:
    description: 'Result list'
    value: ${{ steps.result.outputs.list }}
  markdown:
    description: 'Markdown'
    value: ${{ steps.result.outputs.markdown }}

runs:
  using: "composite"
  steps:
    - name: Setting up inputs
      shell: bash
      run: |
        # Setting up inputs
        TARGET_METRICS="${{ inputs.metrics }}"
        SONAR_PROJECT=
        echo "TARGET_METRICS=$TARGET_METRICS" >> $GITHUB_ENV

    - name: Generate Badges
      id: result
      shell: bash
      run: |
        echo 'list<<EOF' >> $GITHUB_OUTPUT
        ${GITHUB_ACTION_PATH}/print-result.sh list >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

        echo 'markdown<<EOF' >> $GITHUB_OUTPUT
        ${GITHUB_ACTION_PATH}/print-result.sh markdown >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT

    - name: Post comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const { markdown } = process.env;

          await github.rest.issues.createComment({
            owner: context.payload.repository.owner.login,
            repo: context.payload.repository.name,
            issue_number: context.payload.pull_request.number,
            body: markdown
          });
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        markdown: ${{ steps.result.outputs.markdown }}
